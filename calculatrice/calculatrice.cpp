#include "calculatrice.h"



bool Calculatrice::OperationBinaire(char operation){
    /*! Traitement d'un op√©rateur binaire: les op√©randes sont d√©pil√©es puis l'op√©ration est calcul√©e
      En fonction du type d'op√©ration envoy√© en param√®tre.
      */
    if(m_pStock.size()>1){
        Constante* op1 = m_pStock.pop();
        Constante* op2 =m_pStock.pop();


        QString type;
        Complexe* c1;
        Complexe* c2;
        Rationnel* r1;
        Rationnel* r2;


        /*! type Permettra de stocker le type de constante:
          cc pour 2 complexes
          rr pour 2 rationnels
          rc ou cr pour cpx et rationnel
          pour une expression => Il faudra g√©rer concat√©nation en fonction du type
          */

        //! D√©termination du type de constante

        if (op1->GetType()=="complexe" && op2->GetType()=="complexe")
        {
            c1=dynamic_cast<Complexe*>(op1);
            c2=dynamic_cast<Complexe*>(op2);

            type="cc";
        }

        else if (op1->GetType()=="rationnel"&& op2->GetType()=="rationnel"){
            r1=dynamic_cast<Rationnel*>(op1);
            r2=dynamic_cast<Rationnel*>(op2);

            type="rr";
        }



        switch(operation){
        case '+':
            if (type=="cc") //! somme cpx cpx
            {

                //Complexe* res=c1->Somme(c2);
                m_pStock.push(c1->Somme(c2));
                return true;
            }

            if(type=="rr"){ //! somme rat rat
                Rationnel* res=r1->Somme(r2);
                m_pStock.push(res);
                return true;
            }
            // Traiter les cas o√π rationnel + complexe.
            break;

            //! Soustraction
        case '-':
            if (type=="cc") //! <soustraction cpx cpx
            {

                Complexe* res=c1->Difference(c2);
                m_pStock.push(res);
                return true;
            }

            if(type=="rr"){ //! <soustraction rat rat
                Rationnel* res=r1->Difference(r2);
                m_pStock.push(res);
                return true;
            }

            break;

            //! Produit:
        case '*':
            if (type=="cc") //! produit cpx cpx
            {

                Complexe* res=c1->Produit(c2);
                m_pStock.push(res);
                return true;
            }

            if(type=="rr"){ //! produit rat rat
                Rationnel* res=r1->Produit(r2);/* Complexe**/
                m_pStock.push(res);
                return true;
            }

            break;
            //! Division:
        case '/':
            //! Dans le cas de la division r√©elle sur des complexes, on r√©alise la division et on retourne un complexe
            if (m_type==REEL){
                if (type=="cc") //! Division cpx cpx
                {

                    Complexe* res=c1->Quotient(c2);
                    m_pStock.push(res);
                    return true;
                }
                if(type=="rr"){
                    Complexe *res= r1->to_complexe()->Quotient(r2->to_complexe());
                    m_pStock.push(res);
                    return true;
                }

            }


            else if(m_type==RATIONNEL){
                if(type=="rr"){ //! Division rat rat
                    Rationnel* res=r1->Quotient(r2);
                    m_pStock.push(res);
                    return true;
                }
            }

            break;


        default:
            break;
        }
    }
    else std::cout<<"La pile ne contient pas assez d'√©l√©ments";
    return false;//envoyer une exception


}


//void Calculatrice::OperationBinaire2(char operation){
//    std::cout<<"coucou";
//}

/* Algorithme op√©ration binaire
  1. R√©cup√©rer les 2 op√©randes. DOnc checker qu'il y en a au moins 2. Sinon envoyer erreur
  et r√©empiler la donn√©e.
  2. V√©rifier le type.
Si ce sont des nb alors on peut faire l'op√©ration.
Si c'est une expression alors il faut la concat√©ner.

  3. Appeler la m√©thode correspondante
  Division: v√©rifier le mode pour voir l'op√©ration effectu√©e
  Mode Complexe On/Of: checker avant l'affichage du r√©sultat si on est en mode On.
  Sinon choisir traitement.

  */
bool Calculatrice::MajPileS(QString s){
    Constante* c;

    /*! Cas 1: On a entrÈ une expression: elle est construite
      La vÈrification se fera seulement si on appelle EVAL */
    if(s.startsWith("'")){
        if(s.endsWith("'")) c= new Expression(s);

        else  return false;

    }

    /*! Cas 2: on entre une constante complexe.
      Rappel: On ne peut pas rentrer un rationnel directement. Un rationnel est construit slmt si on dÈpile
      2 opÈrandes et que l'on est en mode rationnel
      */

    //! Complexe "classique" seulement si le mode complexe est activÈ. sinon renvoyer une erreur.
    else if(s.contains("$")&& m_modeComplexe ){
        int n=s.indexOf('$');
        QString re=s.left(n);
        QString im=s.right(s.size()-n-1);
        if(EstUnNombre(re)&& EstUnNombre(im))
            c= new Complexe(re.toFloat(), im.toFloat());
        else return false;
    }
    //! Rationnel
    else if(s.contains("/")){
        int n=s.indexOf('/');
        QString num=s.left(n);
        QString den=s.right(s.size()-n-1);
        if(EstUnEntier(num)&& EstUnEntier(den)){
            //try{
            c= new Rationnel(num.toInt(), den.toInt());
            }
        else return false;
    }

    else if(EstUnNombre(s)) c= new Complexe(s.toFloat());
    else return false;

    m_pStock.push(c);
    //m_calc.EmpilerPileA(s); Gestion  historique
    return true;

}

